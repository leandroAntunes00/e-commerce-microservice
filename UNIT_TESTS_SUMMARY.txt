UNIT TESTS SUMMARY - Microservices
Data: 30/08/2025
Gerado automaticamente com base nos arquivos de teste unitário do workspace.

Instruções rápidas:
- Para listar testes descobertos por projeto: dotnet test <projeto.csproj> --list-tests
- Para rodar testes unitários de um projeto em modo detalhado: dotnet test <projeto.csproj> --logger "console;verbosity=detailed"

---
MICROSERVIÇO: SalesService
Local: sales-service/SalesService.UnitTests/

CreateOrderUseCaseTests.cs
- ExecuteAsync_ShouldCreateOrderAndPublishEvent
  - Verifica que ao criar um pedido com itens válidos: o repositório persiste o pedido, o id retornado é o do objeto criado e um evento OrderCreated é publicado.

ProcessPaymentUseCaseTests.cs
- ExecuteAsync_ShouldConfirmReservedOrderAndPublishEvent
  - Testa que, ao processar pagamento de um pedido em status Reserved, o pedido passa para Confirmed, o repositório é atualizado e é publicado um evento OrderConfirmed.

CancelOrderUseCaseTests.cs
- ExecuteAsync_ShouldCancelPendingOrderAndPublishEvent
  - Verifica cancelamento bem-sucedido quando o pedido está em Pending: status é alterado para Cancelled, repositório atualizado e evento OrderCancelled publicado.

ErrorCasesTests.cs
- CreateOrder_WhenProductNotFound_ShouldThrowArgumentException
  - Garante que a criação falha com ArgumentException quando o serviço de estoque não encontra o produto solicitado.
- CancelOrder_WhenOrderNotFound_ShouldThrowArgumentException
  - Garante que cancelar um pedido inexistente lança ArgumentException.
- CancelOrder_WhenStatusInvalid_ShouldThrowInvalidOperationException
  - Garante que cancelar um pedido em status inválido (por exemplo Confirmed) lança InvalidOperationException.
- ProcessPayment_WhenOrderNotFound_ShouldThrowArgumentException
  - Garante que processar pagamento para pedido inexistente lança ArgumentException.
- ProcessPayment_WhenStatusNotReserved_ShouldThrowInvalidOperationException
  - Garante que tentar processar pagamento quando o pedido não está em Reserved lança InvalidOperationException.

Observações: existem alguns arquivos de testes de erro/stub vazios (ex.: CreateOrderUseCaseErrorTests.cs, CancelOrderUseCaseErrorTests.cs) que não contêm código.

---
MICROSERVIÇO: AuthService
Local: auth-service/AuthService/AuthService.UnitTests/

UnitTest1.cs (contém AuthControllerUnitTests)
- HealthCheck_ShouldReturnOk
  - Verifica que o endpoint de health retorna Ok com a mensagem "Auth Service is running!".
- ValidateToken_WithValidToken_ShouldReturnOk
  - Verifica que um token considerado válido retorna Ok com mensagem "Token is valid".
- ValidateToken_WithInvalidToken_ShouldReturnUnauthorized
  - Verifica que um token inválido resulta em Unauthorized.

Observação: este projeto contém um controlador de teste simples (`TestController`) usado para os asserts.

---
MICROSERVIÇO: StockService
Local: stock-service/StockService/StockService.UnitTests/

UnitTest1.cs (ProductModelTests)
- Product_ShouldHaveDefaultValues
  - Verifica os valores default de um `Product` recém-criado (id 0, strings vazias, price 0, IsActive true, CreatedAt próximo do UTC now).
- CreateProductRequest_ShouldHaveDefaultValues
  - Garante valores default do DTO de criação de produto.
- UpdateProductRequest_ShouldHaveDefaultValues
  - Garante valores default do DTO de atualização.
- UpdateStockRequest_ShouldHaveDefaultValues
  - Garante valor default do request de atualização de estoque.
- ProductResponse_ShouldHaveDefaultValues
  - Verifica valores default do response (Success false, Message vazio, Product null, Products vazio).

---
Como manter isso atualizado
- Use `dotnet test <projeto.csproj> --list-tests` para gerar a lista de testes por projeto (útil para atualizar este arquivo).
- Posso automatizar a geração deste resumo (script que roda --list-tests em cada projeto e mapeia para descrições baseadas em nomes ou DisplayName). Quer que eu crie esse script?

Fim do arquivo.
